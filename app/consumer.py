import asyncio
import json
import time
from collections import deque
from aiokafka import AIOKafkaConsumer
from .db import save_to_db
from .config import KAFKA_BROKER, KAFKA_TOPIC, KAFKA_GROUP_ID

latest_messages = deque(maxlen=10)

async def consume():
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ SQLite"""
    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            consumer = AIOKafkaConsumer(
                KAFKA_TOPIC,
                bootstrap_servers=KAFKA_BROKER,
                group_id=KAFKA_GROUP_ID,
                auto_offset_reset="earliest"
            )
            await consumer.start()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Kafka, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

            async for message in consumer:
                try:
                    data = json.loads(message.value)
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                    latest_messages.append(data)

                    if "id" in data:
                        save_to_db(data["id"], json.dumps(data))
                    else:
                        print("‚ö† –û—à–∏–±–∫–∞: –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç 'id'")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Kafka Consumer: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
            await asyncio.sleep(5)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `asyncio.sleep` –≤–º–µ—Å—Ç–æ `time.sleep`
        finally:
            await consumer.stop()
